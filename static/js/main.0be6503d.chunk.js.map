{"version":3,"sources":["components/User/Body/List.js","components/User/Body/Detail.js","components/User/Master.js","App.js","serviceWorker.js","index.js"],"names":["List","user","className","map","value","name","email","Detail","props","showForm","type","placeholder","id","required","onClick","e","reset","clickShowForm","state","show","this","Component","Master","JSON","parse","localStorage","getItem","data","setItem","stringify","setState","edit","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OA4BeA,G,MA1BF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,OACI,yBAAKC,UAAU,2BACX,oCACA,2BAAOA,UAAU,4DACb,+BACI,4BACI,oCACA,uCAGR,+BAEQD,EAAKE,KAAI,SAACC,GAAD,OACL,4BACI,4BAAKA,EAAMC,MACX,4BAAKD,EAAME,gBC2B5BC,E,kDA1CX,WAAaC,GAAQ,IAAD,8BAChB,gBAMJC,SAAW,WACP,OAAI,EAAKD,MAAMC,SAEP,oCACI,8BACI,yBAAKP,UAAU,eACX,yBAAKA,UAAU,cACX,2BAAOG,KAAK,OAAOK,KAAK,OAAOR,UAAU,eAAeS,YAAY,aAAaC,GAAG,OAAOC,UAAQ,KAEvG,yBAAKX,UAAU,cACX,2BAAOG,KAAK,QAAQK,KAAK,OAAOR,UAAU,eAAeS,YAAY,cAAcC,GAAG,QAAQC,UAAQ,MAG9G,4BAAQH,KAAK,QAAQI,QAAS,SAACC,GAAD,OAAO,EAAKP,MAAMQ,SAASd,UAAU,uBAAnE,UACA,4BAAQA,UAAU,mBAAlB,YAMR,4BAAQY,QAAS,SAACC,GAAD,OAAO,EAAKP,MAAMS,iBAAiBf,UAAU,wBAA9D,WAzBR,EAAKgB,MAAQ,CACTC,MAAM,GAHM,E,qDAiChB,OACI,yBAAKjB,UAAU,iBACf,sCACCkB,KAAKX,gB,GArCGY,aC8CNC,E,kDA3CX,WAAYd,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAMP,EAAOsB,KAAKC,MAAMC,aAAaC,QAAQ,SAF9B,OAGf,EAAKR,MAAQ,CACTS,KAAM1B,EACNQ,UAAU,GALC,E,gEAUfgB,aAAaG,QAAQ,OAAQL,KAAKM,UAAU,CAAC,CAACxB,KAAK,UAAWC,MAAO,qBAAsB,CAACD,KAAK,UAAWC,MAAO,qBAAsB,CAACD,KAAK,UAAWC,MAAO,0B,iCAIjKc,KAAKU,SAAS,CACVrB,UAAU,M,8BAKdW,KAAKU,SAAS,CACVC,MAAM,EACN1B,KAAM,GACNC,MAAO,GACPG,UAAU,M,+BAIR,IAAD,OACL,OACI,6BACI,yBAAKP,UAAU,UACX,uCAEJ,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAMD,KAAMmB,KAAKF,MAAMS,OACvB,kBAAC,EAAD,CAAQlB,SAAUW,KAAKF,MAAMT,SAAUQ,cAAe,SAACF,GAAD,OAAO,EAAKN,YAAaO,MAAO,kBAAM,EAAKA,iB,GArChGK,aCWNW,G,6KARP,OACI,6BACI,kBAAC,EAAD,W,GAJEX,cCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0be6503d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst List = ({user}) => {\n    return (\n        <div className=\"col-md-6 body-info pt-4\">\n            <h5>List</h5>\n            <table className=\"table table-striped table-bordered table-hover mt-2 mb-4\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        user.map((value) => (\n                            <tr>\n                                <td>{value.name}</td>\n                                <td>{value.email}</td>\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default List;","import React, { Component } from 'react';\n\nclass Detail extends Component {\n    constructor (props) {\n        super();\n        this.state = {\n            show: false\n        };\n    }\n\n    showForm = () => {\n        if (this.props.showForm) {\n            return (\n                <>\n                    <form>\n                        <div className=\"form-detail\">\n                            <div className=\"form-group\">\n                                <input name=\"name\" type=\"name\" className=\"form-control\" placeholder=\"Enter name\" id=\"name\" required />\n                            </div>\n                            <div className=\"form-group\">\n                                <input name=\"email\" type=\"text\" className=\"form-control\" placeholder=\"Enter email\" id=\"email\" required />\n                            </div>\n                        </div>\n                        <button type=\"reset\" onClick={(e) => this.props.reset()} className=\"btn btn-danger mr-4\">Cancel</button>\n                        <button className=\"btn btn-primary\" > Save </button>\n                    </form>\n                </>\n            );\n        } else {\n            return (\n                <button onClick={(e) => this.props.clickShowForm()} className=\"btn btn-primary mr-4\">Create</button>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-6 pt-4\">\n            <h5>Detail</h5>\n            {this.showForm()}\n            </div>\n        );\n    }\n}\n\nexport default Detail;\n","import React, { Component } from 'react';\nimport List from './Body/List';\nimport Detail from './Body/Detail';\n\nclass Master extends Component {\n    constructor(props) {\n        super(props);\n        const user = JSON.parse(localStorage.getItem('user'));\n        this.state = {\n            data: user,\n            showForm: false\n        };\n    }\n\n    componentDidMount() {\n        localStorage.setItem('user', JSON.stringify([{name:'Minhtu1', email: 'minhtu1@gmail.com'}, {name:'minhtu2', email: 'minhtu2@gmail.com'}, {name:'minhtu3', email: 'minhtu3@gmail.com'}]));\n    }\n\n    showForm () {\n        this.setState({\n            showForm: true\n        })\n    }\n\n    reset () {\n        this.setState({\n            edit: false,\n            name: '',\n            email: '',\n            showForm: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"header\">\n                    <h2>Header</h2>\n                </div>\n                <div className=\"row body\">\n                    <List user={this.state.data} />\n                    <Detail showForm={this.state.showForm} clickShowForm={(e) => this.showForm() } reset={() => this.reset()}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Master;","import React, { Component } from 'react'\nimport './App.css';\nimport Master from './components/User/Master';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Master />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}